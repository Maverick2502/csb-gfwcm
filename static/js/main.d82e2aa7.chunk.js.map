{"version":3,"sources":["hooks/use-input.jsx","components/BasicForm.js","App.js","index.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","BasicForm","props","formIsValid","trim","enteredName","enteredNameIsValid","nameInputHasError","nameChangeHandler","nameBlurHandler","resetName","enteredSurname","enteredSurnameIsValid","surnameInputHasError","surnameChangeHadler","surnameBlurHandler","resetSurname","includes","enteredEmail","enteredEmailValid","emailInputHasError","emailhangeHandler","emailBlurHandler","resetEmail","onSubmit","e","preventDefault","console","log","className","htmlFor","type","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAgCeA,MA9Bf,SAAkBC,GAChB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACLK,MAAOL,EACPM,QAASF,EACTG,UAlBgBH,GAAgBF,EAmBhCM,mBAjByB,SAACC,GAC1BR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAduB,SAACF,GACxBN,GAAa,IAcbS,MAXY,WACZX,EAAgB,IAChBE,GAAa,M,OC8FFU,MA9Gf,SAAmBC,GACjB,IA2BIC,EA3BJ,EAOIlB,GAAS,SAACQ,GAAD,MAA4B,KAAjBA,EAAMW,UANrBC,EADT,EACEZ,MACSa,EAFX,EAEEZ,QACUa,EAHZ,EAGEZ,SACoBa,EAJtB,EAIEZ,mBACkBa,EALpB,EAKEV,iBACOW,EANT,EAMEV,MAGF,EAOIf,GAAS,SAACQ,GAAD,MAA4B,KAAjBA,EAAMW,UANrBO,EADT,EACElB,MACSmB,EAFX,EAEElB,QACUmB,EAHZ,EAGElB,SACoBmB,EAJtB,EAIElB,mBACkBmB,EALpB,EAKEhB,iBACOiB,EANT,EAMEhB,MAGF,EAOIf,GAAS,SAACQ,GAAD,OAAWA,EAAMwB,SAAS,QAN9BC,EADT,EACEzB,MACS0B,EAFX,EAEEzB,QACU0B,EAHZ,EAGEzB,SACoB0B,EAJtB,EAIEzB,mBACkB0B,EALpB,EAKEvB,iBACOwB,EANT,EAMEvB,MAmCF,OA9BIM,GAAsBM,GAAyBO,IACjDhB,GAAc,GA8Bd,uBAAMqB,SA3BR,SAA+BC,GAC7BA,EAAEC,kBAEGpB,GAAuBM,GAA0BO,KAItDQ,QAAQC,IAAIvB,EAAaM,EAAgBO,GAEzCR,IACAM,IACAO,MAgBA,UACE,sBAAKM,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAUzB,EACV0B,OAAQzB,EACRhB,MAAOY,IAERE,GACC,mBAAGsB,UAAU,aAAb,wCAGJ,sBAAKA,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAUnB,EACVoB,OAAQnB,EACRtB,MAAOkB,IAERE,GACC,mBAAGgB,UAAU,aAAb,8CAIN,sBAAKA,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,4BACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAUZ,EACVa,OAAQZ,EACR7B,MAAOyB,IAERE,GACC,mBAAGS,UAAU,aAAb,yCAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQM,UAAWhC,EAAnB,0BC/FOiC,MATf,WACE,OACE,qBAAKP,UAAU,MAAf,SAEE,cAAC,EAAD,OCFNQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.d82e2aa7.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useInput(validateValue) {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n}\n\nexport default useInput;\n","import React from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nfunction BasicForm(props) {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredSurname,\n    isValid: enteredSurnameIsValid,\n    hasError: surnameInputHasError,\n    valueChangeHandler: surnameChangeHadler,\n    inputBlurHandler: surnameBlurHandler,\n    reset: resetSurname\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailhangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid;\n\n  if (enteredNameIsValid && enteredSurnameIsValid && enteredEmailValid) {\n    formIsValid = true;\n  }\n\n  function formSubmissionHandler(e) {\n    e.preventDefault();\n\n    if (!enteredNameIsValid && !enteredSurnameIsValid && !enteredEmailValid) {\n      return;\n    }\n\n    console.log(enteredName, enteredSurname, enteredEmail);\n\n    resetName();\n    resetSurname();\n    resetEmail();\n  }\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const surnameInputClasses = surnameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"control-group\">\n        <div className=\"form-control\">\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n            value={enteredName}\n          />\n          {nameInputHasError && (\n            <p className=\"error-text\">Name must not be empty.</p>\n          )}\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={surnameChangeHadler}\n            onBlur={surnameBlurHandler}\n            value={enteredSurname}\n          />\n          {surnameInputHasError && (\n            <p className=\"error-text\">Surname must not be empty.</p>\n          )}\n        </div>\n      </div>\n      <div className=\"form-control\">\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={emailhangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n}\n\nexport default BasicForm;\n","import SimpleInput from \"./components/SimpleInput\";\nimport BasicForm from \"./components/BasicForm\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <SimpleInput /> */}\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}